datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    USER
    ADMIN
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    password      String?
    image         String?
    role          UserRole  @default(USER)
    accounts      Account[]
    sessions      Session[]
    
    stripeCustomerId        String?     @unique
    stripeSubscriptionId    String?     @unique
    stripePriceId           String?
    stripeCurrentPeriodEnd  DateTime?

    isTwoFactorEnabled Boolean @default(false)
    twoFactorConfirmation TwoFactorConfirmation?

    rateLimit RateLimit?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    gallery Gallery[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String   
    token      String   @unique
    expires    DateTime

    @@id([identifier, token])
}

model PasswordResetToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@id([identifier, token])
}

model TwoFactorToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@id([identifier, token])
}

model TwoFactorConfirmation {
    id        String    @id @default(cuid())
    userId    String    @unique

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RateLimit {
    id        String   @id @default(cuid())
    userId    String   @unique
    count     Int      @default(0)
    resetAt   DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Gallery {
    id                  String   @id @default(cuid())
    userId              String
    name                String
    description         String?
    imageOrigin         String
    imageTransformed    String
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}